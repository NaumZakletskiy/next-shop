/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  category?: string;
  price?: number;
  availability?: boolean;
  slug?: Slug;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Product | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/modules/product/sanity/queries/categories.ts
// Variable: CATEGORIES_QUERY
// Query: array::unique(*[_type == "product" && defined(category)].category)
export type CATEGORIES_QUERYResult = Array<string | null>;

// Source: ./src/modules/product/sanity/queries/product.ts
// Variable: PRODUCT_QUERY
// Query: *[_type == "product" && slug.current == $slug][0]{  title, body, "imageUrl": image.asset->url, category, description, availability, price}
export type PRODUCT_QUERYResult = {
  title: string | null;
  body: null;
  imageUrl: string | null;
  category: string | null;
  description: string | null;
  availability: boolean | null;
  price: number | null;
} | null;

// Source: ./src/modules/product/sanity/queries/products.ts
// Variable: PRODUCTS_QUERY
// Query: *[  _type == "product"]{_id, title, price, slug, "imageUrl": image.asset->url}
export type PRODUCTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  price: number | null;
  slug: Slug | null;
  imageUrl: string | null;
}>;

// Source: ./src/modules/product/sanity/queries/related-products.ts
// Variable: RELATED_PRODUCTS_QUERY
// Query: *[  _type == "product" &&  category == $category &&  slug.current != $slug] | order(_createdAt desc)[0...4] {  _id,  title,  price,  "imageUrl": image.asset->url,  slug}
export type RELATED_PRODUCTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  price: number | null;
  imageUrl: string | null;
  slug: Slug | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "array::unique(*[_type == \"product\" && defined(category)].category)": CATEGORIES_QUERYResult;
    "*[_type == \"product\" && slug.current == $slug][0]{\n  title, body, \"imageUrl\": image.asset->url, category, description, availability, price\n}": PRODUCT_QUERYResult;
    "*[\n  _type == \"product\"\n]{_id, title, price, slug, \"imageUrl\": image.asset->url}": PRODUCTS_QUERYResult;
    "*[\n  _type == \"product\" &&\n  category == $category &&\n  slug.current != $slug\n] | order(_createdAt desc)[0...4] {\n  _id,\n  title,\n  price,\n  \"imageUrl\": image.asset->url,\n  slug\n}": RELATED_PRODUCTS_QUERYResult;
  }
}
